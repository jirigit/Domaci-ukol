"use strict";
const { Config } = require("uu_appg01_core-utils");
const { DaoFactory } = require("uu_appg01_objectstore");
const { ValidationHelper } = require("uu_appg01_core-appserver");
const { Validator } = require("uu_appg01_core-validation");
const { ConfigurationError } = require("../api/errors/sys-qos-deploy-configuration-errors.js");
const { LoggerFactory } = require("uu_appg01_core-logging");
const SysQosConfigurationAbl = require("../abl/sys-qos-configuration-abl.js");

class AppRateLimitStartupListener {
  async onStartup() {
    if (DaoFactory.isDataStoreOn()) {
      const logger = LoggerFactory.get("Uu.AppQos");
      const asid = Config.get("asid");
      const dao = require("../abl/sys-qos-configuration-abl.js").dao;
      await dao.createSchema();
      let quota = await SysQosConfigurationAbl.getConfiguration(asid);
      delete quota.awid;
      delete quota.sys;
      delete quota.id;
      delete quota.uuAppErrorMap;

      const validator = Validator.load();
      let validationResult = validator.validate("setSysQosConfigurationDtoInType", quota);
      ValidationHelper.processValidationResult(
        quota,
        validationResult,
        `${ConfigurationError.InvalidDeployConfigurationParamsError}unsupportedKeys`,
        ConfigurationError.InvalidDeployConfigurationParamsError
      );

      const progressBarUpdateManager = require("../components/progress-bar-update-manager.js");
      const rateLimitComponent = require("../components/rate-limiting-component.js");
      if (progressBarUpdateManager.isConsoleUriConfigured()) {
        await rateLimitComponent.updateStatus(quota);
      } else {
        if (!SysQosConfigurationAbl.getProgressBaseUri()) {
          logger.warn(
            `Deployment parameter "uu_app_qos_progress_base_uri" is not set. UuAppStatus monitoring is not started.`
          );
        }
        if (!SysQosConfigurationAbl.getProgressUpdateEnabled()){
          logger.warn(
            `Deployment parameter "uu_app_qos_progress_update_enabled" is false. UuAppStatus monitoring is not started.`
          );
        }
      }
      let runTimeout = () => {
        if (progressBarUpdateManager.isConsoleUriConfigured()) {
          rateLimitComponent.resetCounters(SysQosConfigurationAbl.qosConfig);
          rateLimitComponent.updateStatus(quota);
        }
        setTimeout(runTimeout, SysQosConfigurationAbl.getProgressUpdatePeriod() * 1000);
      };
      setTimeout(runTimeout, SysQosConfigurationAbl.getProgressUpdatePeriod() * 1000);
    }
  }
}

module.exports = AppRateLimitStartupListener;
