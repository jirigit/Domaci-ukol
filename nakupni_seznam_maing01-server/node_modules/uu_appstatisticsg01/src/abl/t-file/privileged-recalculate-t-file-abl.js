// template: recalculate-privileged-t-file-abl
// templateVersion: 0.1.1
//@@viewOn:revision
// coded: Hrynkiv Andriy (5890-4974-1)
// reviewed: Lukas Sykora (12-7774-1) - 30.03.2022
//@@viewOff:revision
//@@viewOn:constants

"use strict";
const { Validator } = require("uu_appg01_server").Validation;
const { ValidationHelper } = require("uu_appg01_server").AppServer;
const Errors = require("../../api/errors/t-files-error");
const WARNINGS = require("../../api/warnings/t-files-warnings");
const Constants = require("../../components/constants/t-file-constans");
const AppClient = require("uu_appg01_server").AppClient;
const { Config } = require("uu_appg01_server").Utils;
const { getSystemIdentity, getAuthorizedProfiles, isAuthorities } = require("../../helpers/app-stats-helper");

class PrivilegedRecalculateTFilesAbl {
  constructor() {
    this.validator = Validator.load();
  }

  async privilegedRecalculateTFiles(dtoIn, authzContext) {
    let uuAppErrorMap;

    //HDS 1
    let validationResult = this.validator.validate("uuAppstatisticsPrivilegedRecalculateTFileDtoInTypes", dtoIn);
    uuAppErrorMap = ValidationHelper.processValidationResult(
      dtoIn,
      validationResult,
      WARNINGS.privilegedRecalculateTFilesUnsupportedKeys.code,
      Errors.PrivilegedRecalculateTFiles.InvalidDtoIn
    );

    //HDS 2
    const sysIdentitySession = await getSystemIdentity();
    const asid = sysIdentitySession.getClientIdentity().getAwid();

    const authorizedProfiles = await getAuthorizedProfiles(authzContext);
    if ((dtoIn.force || dtoIn.resetData) && !isAuthorities(authorizedProfiles)) {
      throw new Errors.PrivilegedRecalculateTFiles.UserIsNotAuthorized({ uuAppErrorMap }, { authorizedProfiles });
    }

    //HDS 3
    if (!Config.get(Constants.TFileStoreUri)) {
      throw new Errors.PrivilegedRecalculateTFiles.TFileStoreUriConfigIsNotSet({ uuAppErrorMap });
    }

    let client = new AppClient({
      baseUri: Config.get(Constants.TFileStoreUri),
      session: sysIdentitySession,
    });

    let recalculate;

    try {
      recalculate = await client.post(Constants.Calls.recalculateScript, {
        ...dtoIn,
        asid,
      });
    } catch (error) {
      //HDS 3.1
      throw new Errors.PrivilegedRecalculateTFiles.PrivilegedRecalculateTFilesFailed({ uuAppErrorMap }, error);
    }

    //HDS 4
    return { ...recalculate, authorizedProfiles, uuAppErrorMap };
  }
}

module.exports = new PrivilegedRecalculateTFilesAbl();
