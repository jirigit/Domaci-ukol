"use strict";
const AppStatusCounter = require("../components/app-status-counter.js");
const MIDDLEWARE_ORDER = -10;
const NS_PER_SEC = 1e9;
const NS_PER_MS = 1e6;

class AppStatusMiddleware {
  constructor() {
    this.name = "App Status Middleware";
    this.order = MIDDLEWARE_ORDER;
  }

  async ensure(req, res) {
    let resData = {
      uuId: null,
      identityType: null,
      identityAppKey: null,
      clientAppKey: null,
      errorCode: null,
      ucName: null,
      awid: null,
      reqTime: null,
      statusCode: null,
    };

    // load caller identity and client details
    let session = res.locals.session;
    // prevent empty session, oidc/callback etc...
    if (session && session.getAuthenticationId()) {
      // get identity uuId
      resData.uuId = session.getIdentity().getUuIdentity();

      // get identity type
      resData.identityType = session.getIdentity().getType();

      // get identity uuAppKey
      if (session.getIdentity() && session.getIdentity().getUuAppKey()) {
        resData.identityAppKey = session.getIdentity().getUuAppKey();
      }

      // get client uuAppKey
      if (session.getClientIdentity() && session.getClientIdentity().getUuAppKey()) {
        resData.clientAppKey = session.getClientIdentity().getUuAppKey();
      }
    }

    // gets error code
    if (res.locals.dispatchedError && res.locals.dispatchedError.code)
      resData.errorCode = res.locals.dispatchedError.code;
    if (!resData.errorCode && res.locals.dispatchedErrorCode) resData.errorCode = res.locals.dispatchedErrorCode;

    // gets the name of called use case
    if (res.locals.ucProperties && res.locals.ucProperties.name) resData.ucName = res.locals.ucProperties.name;
    if (!resData.ucName && res.locals.ucProperties && res.locals.ucProperties._name)
      resData.ucName = res.locals.ucProperties._name;

    // gets awid of called app
    if (res.locals.uri) {
      resData.awid = res.locals.uri.getAwid();
    }

    // measures code execution time in nanoseconds
    const time = process.hrtime(res.locals.startRequestTime);
    const nanos = time[0] * NS_PER_SEC + time[1];

    // set reqTime in milliseconds
    resData.reqTime = nanos / NS_PER_MS;

    // sets status code
    resData.statusCode = res.statusCode;

    // record status of response
    await AppStatusCounter.record(resData);
  }
}

module.exports = AppStatusMiddleware;
