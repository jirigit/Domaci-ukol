//@@viewOn:revision
// documentation: https://uuapp.plus4u.net/uu-bookkit-maing01/d11a43aa3a214083b84a4e4103a4f635/book/page?code=81647091#UuAppDesignKitAlgorithm-7f46ef38379a243b6a3ab18b825a50ff
// coded: Eduard Batiushchenko (9108-9377-1)
// reviewed:
//@@viewOff:revision
"use strict";
const CustomConstants = require("../components/constants/custom-stats-constants");
const AppClient = require("uu_appg01_server").AppClient;
const Errors = require("../api/errors/custom-stats-errors");
const { UriBuilder } = require("uu_appg01_server").Uri;

const getFileAttributesHelper = {
  /**
   * gets file attributes
   *
   * @param awid
   * @param dtoIn
   * @param binaryStoreBaseUri
   * @param sysIdentitySession
   * @param collection
   * @returns {Promise<{code: (*|string), binaryContentType: (string|string|*), binaryDataUrl: string, validTo: string}>}
   */
  getFileAttributes: async function (awid, dtoIn, binaryStoreBaseUri, sysIdentitySession, collection) {
    const client = new AppClient({
      baseUri: binaryStoreBaseUri,
      session: sysIdentitySession,
    });

    // HDS 1
    const uuObject = { clientAwid: awid, code: dtoIn.fileCode };

    // HDS 2, 2.1
    const binaryResponse = await client.get(CustomConstants.useCases.binary.get, uuObject);

    const checkFirstCollection = binaryResponse.collectionList.includes(collection[0]);
    const checkSecondCollection = binaryResponse.collectionList.includes(collection[1]);

    if (binaryResponse.collectionList.length > 1) {
      if (!(checkFirstCollection && checkSecondCollection)) {
        throw new Errors.BaseErrors.InvalidCollectionList({ cause: { code: uuObject.code, clientAwid: awid } });
      }
    } else {
      if (!checkFirstCollection) {
        throw new Errors.BaseErrors.InvalidCollectionList({ cause: { code: uuObject.code, clientAwid: awid } });
      }
    }

    // HDS 3, 3.1
    let fileObject;
    try {
      fileObject = await client.post(CustomConstants.useCases.binary.createAccess, uuObject);
    } catch (e) {
      throw new Errors.BaseErrors.GetAccessKeyFailed(e);
    }

    const binaryDataUrl = UriBuilder.parse(fileObject.baseUri)
      .setUseCase(fileObject.useCase)
      .setParameters({
        clientAwid: fileObject.clientAwid,
        code: fileObject.code,
        accessKey: fileObject.accessKey,
      })
      .toString();

    // HDS 4
    return {
      code: uuObject.code,
      binaryContentType: binaryResponse.contentType,
      binaryDataUrl,
      validTo: fileObject.expirationTs,
    };
  },
};

module.exports = getFileAttributesHelper;
