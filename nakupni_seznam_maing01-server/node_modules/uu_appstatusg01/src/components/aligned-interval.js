//@ts-check
"use strict";

class AlignedInterval {
  /**
   * Performs a scheduled interval, while aligning it to whole number increments from start of time.
   * @param {(time: Date) => unknown} fn - The function to call.
   * @param {number} ms - The interval in milliseconds.
   */
  constructor(fn, ms) {
    this.fn = fn;
    this.intervalMs = ms;
    this.next = AlignedInterval.calcNext(this.intervalMs);
    this.timer = setTimeout(() => this.invoke(), this.next - Date.now());
  }

  invoke() {
    this.fn(new Date(this.next));
    this.next += this.intervalMs;
    this.clear();
    this.timer = setTimeout(() => this.invoke(), this.next - Date.now());
  }

  clear() {
    if (this.timer) {
      clearTimeout(this.timer);
      this.timer = null;
    }
  }

  /**
   * Calculates the next time to call a function in the aligned interval.
   * @param {number} intervalMs - The interval in milliseconds.
   * @returns {number} The next time to call the function in milliseconds.
   */
  static calcNext(intervalMs) {
    return Math.floor(Date.now() / intervalMs) * intervalMs + intervalMs;
  }
}

module.exports = AlignedInterval;
