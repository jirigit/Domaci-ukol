"use strict";
const { LoggerFactory } = require("uu_appg01_core-logging");
const { AuthenticationService } = require("uu_appg01_core-authentication");

const AlignedInterval = require("../components/aligned-interval");

const statusUpdater = require("../status-updater");
const appStatusCounter = require("../components/app-status-counter");

const LOGGER = LoggerFactory.get("Uu.AppStatus");

class AppStatusStartupListener {
  async onStartup() {
    if (!statusUpdater.progressUri) {
      LOGGER.warn(
        `Deployment parameter "${statusUpdater.getAppStatusProgressBaseUriConfigName()}" is not set. UuAppStatus monitoring is not started.`
      );
    } else if (!statusUpdater.progressUuEe && typeof AuthenticationService.authenticateSystemIdentity !== "function") {
      LOGGER.warn(
        `System identity can be used only in uuAppServer 5.3+ in uuCloud. For older versions of uuAppServer, whitelisted uuEe have to be used but deployment parameter "${statusUpdater.getAppStatusProgressUuEeConfigName()}" is not set. UuAppStatus monitoring is not started.`
      );
    } else {
      try {
        await statusUpdater.update();
      } catch (e) {
        LOGGER.error("Failed to update progress.", e);
      }

      const appStatusResetPeriod = appStatusCounter.getCounterResetTimeInterval() * 1_000;
      const progressUpdatePeriod = statusUpdater.getProgressUpdatePeriod() * 1_000;

      // start aligned interval to update and reset app status counter
      new AlignedInterval(
        (atTime) => statusUpdater.updateAndReset(atTime).catch(e => LOGGER.error("Failed to update progress.", e)),
        appStatusResetPeriod
      );
      // only if the updates should be more frequent than the counter reset period, start the progress update interval
      if (progressUpdatePeriod < appStatusResetPeriod) {
        new AlignedInterval(
          (atTime) => statusUpdater.update(atTime).catch(e => LOGGER.error("Failed to update progress.", e)),
          progressUpdatePeriod
        );
      }
    }
  }
}

module.exports = AppStatusStartupListener;
