const { AuthenticationService } = require("uu_appg01_server").Authentication;
const { UuSubAppInstance, UuAppWorkspace } = require("uu_appg01_server").Workspace;

const getFileCode = function (dtoIn, awid) {
  if (!dtoIn.fileCode) {
    let date = dtoIn.date.replace(/-/g, "");
    let dateTime = new Date(dtoIn.date);
    // get raw data for selected day
    let timezone = dateTime.toString().substr(25, 8);
    let timezoneCodeForFile = timezone[3] === "+" ? `p${timezone.split("+")[1]}` : `m${timezone.split("-")[1]}`;

    if (dtoIn.blockNumber) {
      return `uuALS_${awid}_${date}_${timezoneCodeForFile}_${dtoIn.fileType}_${dtoIn.blockNumber}`;
    } else {
      return `uuALS_${awid}_${date}_${timezoneCodeForFile}_${dtoIn.fileType}`;
    }
  } else {
    return dtoIn.fileCode;
  }
};

// Its needed for unit tests, cant mock systemIdentity
const getSystemIdentity = async function () {
  let sysIdentitySession;
  try {
    sysIdentitySession = await AuthenticationService.authenticateSystemIdentity();
  } catch (e) {
    if (!(process.env.NODE_ENV === "test")) {
      throw e;
    }
    sysIdentitySession = {
      getClientIdentity: () => ({ getAwid: () => "testAwid" }),
      getCallToken: () => "testCallToken",
    };
  }
  return sysIdentitySession;
};
// Its needed for unit tests, cant mock subinstance
const getUuSubAppInstance = async function () {
  let subinstance;
  try {
    subinstance = await UuSubAppInstance.get();
  } catch (e) {
    if (!(process.env.NODE_ENV === "test")) {
      throw e;
    }
    subinstance = {
      authorizationStrategy: "artifact",
      asid: "test",
    };
  }
  return subinstance;
};

// Its needed for unit tests, cant mock sysUuAppWorkspace
const getUuAppWorkspace = async function (awid) {
  let sysUuAppWorkspace;
  try {
    sysUuAppWorkspace = await UuAppWorkspace.get(awid);
  } catch (e) {
    if (!(process.env.NODE_ENV === "test")) {
      throw e;
    }
    sysUuAppWorkspace = {
      authorizationStrategy: "artifact",
      artifactUri: "test",
    };
  }
  return sysUuAppWorkspace;
};

// Its needed for unit tests, cant mock getAuthorizedProfiles
const getAuthorizedProfiles = async function (authzContext) {
  let authorizedProfiles;
  try {
    authorizedProfiles = await authzContext.getAuthorizedProfiles();
  } catch (e) {
    if (!(process.env.NODE_ENV === "test")) {
      throw e;
    }
    authorizedProfiles = ["test"];
  }

  return authorizedProfiles;
};

const isAuthorities = function (authProfiles) {
  return authProfiles.includes("Authorities") || authProfiles.includes("AsidAuthorities");
};

module.exports = {
  getFileCode,
  getSystemIdentity,
  getUuSubAppInstance,
  getUuAppWorkspace,
  getAuthorizedProfiles,
  isAuthorities,
};
