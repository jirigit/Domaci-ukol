"use strict";
const { Config, OptsReader, Mutex } = require("uu_appg01_core-utils");
const { DaoFactory } = require("uu_appg01_datastore");
const { Validator } = require("uu_appg01_core-validation");
const { ValidationHelper } = require("uu_appg01_core-appserver");
const MutexInstance = new Mutex();
const QosErrors = require("../api/errors/sys-qos-configuration-errors");
const QosCache = require("../components/qos-cache.js");

const APP_QOS_QUOTA_TOTAL_LIMIT_WARNING_NAME = "uu_app_qos_quota_total_limit_warning";
const APP_QOS_QUOTA_TOTAL_LIMIT_ERROR_NAME = "uu_app_qos_quota_total_limit_error";
const APP_QOS_QUOTA_UU_IDENTITY_TOTAL_LIMIT_WARNING_NAME = "uu_app_qos_quota_uu_identity_total_limit_warning";
const APP_QOS_QUOTA_UU_IDENTITY_TOTAL_LIMIT_ERROR_NAME = "uu_app_qos_quota_uu_identity_total_limit_error";
const APP_QOS_QUOTA_UU_IDENTITY_LIMIT_WARNING_NAME = "uu_app_qos_quota_uu_identity_limit_warning";
const APP_QOS_QUOTA_UU_IDENTITY_LIMIT_ERROR_NAME = "uu_app_qos_quota_uu_identity_limit_error";
const APP_QOS_QUOTA_UU_APP_TOTAL_LIMIT_ERROR_NAME = "uu_app_qos_quota_uu_app_total_limit_error";
const APP_QOS_QUOTA_UU_APP_TOTAL_LIMIT_WARNING_NAME = "uu_app_qos_quota_uu_app_total_limit_warning";
const APP_QOS_QUOTA_UU_APP_LIMIT_WARNING_NAME = "uu_app_qos_quota_uu_app_limit_warning";
const APP_QOS_QUOTA_UU_APP_LIMIT_ERROR_NAME = "uu_app_qos_quota_uu_app_limit_error";
const APP_QOS_QUOTA_UU_IDENTITY_UNKNOWN_LIMIT_WARNING_NAME = "uu_app_qos_quota_uu_identity_unknown_limit_warning";
const APP_QOS_QUOTA_UU_IDENTITY_UNKNOWN_LIMIT_ERROR_NAME = "uu_app_qos_quota_uu_identity_unknown_limit_error";
const APP_QOS_QUOTA_UU_APP_UNKNOWN_LIMIT_WARNING_NAME = "uu_app_qos_quota_uu_app_unknown_limit_warning";
const APP_QOS_QUOTA_UU_APP_UNKNOWN_LIMIT_ERROR_NAME = "uu_app_qos_quota_uu_app_unknown_limit_error";

const APP_QOS_COUNTER_RESET_TIME_INTERVAL_NAME = "uu_app_qos_quota_counter_reset_time_interval";
const APP_QOS_PROGRESS_UPDATE_PERIOD_NAME = "uu_app_qos_progress_update_period";
const APP_QOS_PROGRESS_BASE_URI = "uu_app_qos_progress_base_uri";
const APP_QOS_PROGRESS_UPDATE_ENABLED = "uu_app_qos_progress_update_enabled";
const APP_QOS = "uuAppQoS";
const APP_QOS_PROGRESS_BUS_CODE = "uu_app_qos_progress_bus_code";

const APP_QOS_QUOTA_COUNTER_HISTORY_SIZE = "uu_app_qos_quota_counter_history_size";
const DEFAULT_COUNTER_HISTORY_SIZE = 5;
const MAX_COUNTER_HISTORY_SIZE = 100;

const DEFAULT_QUOTA = {
  totalLimitError: 0,
  uuIdentityTotalLimitError: 0,
  uuIdentityLimitError: 0,
  uuAppTotalLimitError: 0,
  uuAppLimitError: 0,
  counterResetTimeInterval: 60,
};
const DEFAULT_COEFFICIENT = 0.8;

class SysQosConfigurationAbl {
  constructor() {
    this.asid = Config.get("asid");
    this.validator = Validator.load();
    this.dao = DaoFactory.getDao("sysQosConfig");
    this.opts = new OptsReader(Config);
    this.counterResetTimeInterval = this.opts.get(
      APP_QOS_COUNTER_RESET_TIME_INTERVAL_NAME,
      DEFAULT_QUOTA.counterResetTimeInterval
    );
    this.progressUpdatePeriod = this.opts.get(
      APP_QOS_PROGRESS_UPDATE_PERIOD_NAME,
      Math.max(10, this.counterResetTimeInterval / 4)
    );
    this.progressBaseUri = this.opts.get(APP_QOS_PROGRESS_BASE_URI, null);
    this.progressUpdateEnabled = this.opts.getBoolean(APP_QOS_PROGRESS_UPDATE_ENABLED, true);
    // System sets progressBusCode
    this.progressBusCode = Config.get(APP_QOS_PROGRESS_BUS_CODE);
    if (!this.progressBusCode) {
      this.progressBusCode = `${APP_QOS}_${this.asid}`;
    }
    this.counterHistorySize = this.opts.get(APP_QOS_QUOTA_COUNTER_HISTORY_SIZE, DEFAULT_COUNTER_HISTORY_SIZE);
    if (this.counterHistorySize > MAX_COUNTER_HISTORY_SIZE) {
      this.counterHistorySize = MAX_COUNTER_HISTORY_SIZE;
    }
    this.defaultQuota = this._composeDefaultQuota();
    this.qosConfig = this.defaultQuota;
  }

  async setConfiguration(awid, dtoIn) {
    let validationResult = this.validator.validate("setSysQosConfigurationDtoInType", dtoIn);
    let uuAppErrorMap = ValidationHelper.processValidationResult(
      dtoIn,
      validationResult,
      `${QosErrors.SetConfiguration.UC_CODE}unsupportedKeys`,
      QosErrors.SetConfiguration.InvalidDtoInError
    );

    let qosConfig = { ...dtoIn };
    qosConfig.awid = awid;

    try {
      qosConfig = await this.dao.updateByAwid(qosConfig);
    } catch (e) {
      try {
        qosConfig = await this.dao.create(qosConfig);
      } catch (error) {
        throw new QosErrors.SetConfiguration.CreateQuotaFailed({ uuAppErrorMap }, { awid }, error);
      }
    }

    const completeQosConfig = this._completeAndCacheQuota(qosConfig);
    completeQosConfig.uuAppErrorMap = uuAppErrorMap;
    return completeQosConfig;
  }

  async getConfiguration(awid) {
    let resultQuota = {};
    let cachedQuota = QosCache.getQuota();
    if (!cachedQuota) {
      let storedQuota = await MutexInstance.runOneAtTime(this._getQuotaByAwid, awid, this.dao);
      resultQuota = this._completeAndCacheQuota(storedQuota || {});
    } else {
      resultQuota = cachedQuota;
    }
    resultQuota.uuAppErrorMap = {};
    return resultQuota;
  }

  async _getQuotaByAwid(awid, sysQosDao) {
    return await sysQosDao.getByAwid(awid);
  }

  _completeAndCacheQuota(params) {
    let newQuota = Object.assign(this.defaultQuota, params);
    this._updateWarningFields(newQuota, params);
    newQuota.cacheTtl && QosCache.setMaxAge(newQuota.cacheTtl);
    QosCache.saveQuota(newQuota);
    this.qosConfig = newQuota;
    newQuota.counterResetTimeInterval && this.setCounterResetTimeInterval(newQuota.counterResetTimeInterval);
    newQuota.progressUpdatePeriod && this.setProgressUpdatePeriod(newQuota.progressUpdatePeriod);
    newQuota.progressBaseUri && this.setProgressBaseUri(newQuota.progressBaseUri);
    newQuota.progressUpdateEnabled && this.setProgressUpdateEnabled(newQuota.progressUpdateEnabled);
    newQuota.counterHistorySize && this.setCounterHistorySize(newQuota.counterHistorySize);
    newQuota.progressBusCode && this.setProgressBusCode(newQuota.progressBusCode);
    return newQuota;
  }

  _updateWarningFields(newQuota, params) {
    for (let [key, value] of Object.entries(params)) {
      if (key.endsWith("Error")) {
        let fieldName = key.split("Error")[0] + "Warning";
        if (params[fieldName]) {
          newQuota[fieldName] = params[fieldName];
        } else {
          newQuota[fieldName] = Math.floor(value * DEFAULT_COEFFICIENT);
        }
      }
    }
  }

  _composeDefaultQuota() {
    let totalLimitError = this.opts.get(APP_QOS_QUOTA_TOTAL_LIMIT_ERROR_NAME, DEFAULT_QUOTA.totalLimitError);
    let totalLimitWarning = this.opts.get(
      APP_QOS_QUOTA_TOTAL_LIMIT_WARNING_NAME,
      this._getDefaultWarningValue(totalLimitError)
    );
    let uuIdentityTotalLimitError = this.opts.get(
      APP_QOS_QUOTA_UU_IDENTITY_TOTAL_LIMIT_ERROR_NAME,
      DEFAULT_QUOTA.uuIdentityTotalLimitError
    );
    let uuIdentityTotalLimitWarning = this.opts.get(
      APP_QOS_QUOTA_UU_IDENTITY_TOTAL_LIMIT_WARNING_NAME,
      this._getDefaultWarningValue(uuIdentityTotalLimitError)
    );
    let uuIdentityLimitError = this.opts.get(
      APP_QOS_QUOTA_UU_IDENTITY_LIMIT_ERROR_NAME,
      DEFAULT_QUOTA.uuIdentityLimitError
    );
    let uuIdentityLimitWarning = this.opts.get(
      APP_QOS_QUOTA_UU_IDENTITY_LIMIT_WARNING_NAME,
      this._getDefaultWarningValue(uuIdentityLimitError)
    );
    let uuAppLimitError = this.opts.get(APP_QOS_QUOTA_UU_APP_LIMIT_ERROR_NAME, DEFAULT_QUOTA.uuAppLimitError);

    let uuAppLimitWarning = this.opts.get(
      APP_QOS_QUOTA_UU_APP_LIMIT_WARNING_NAME,
      this._getDefaultWarningValue(uuAppLimitError)
    );
    let uuIdentityUnknownLimitError = this.opts.get(
      APP_QOS_QUOTA_UU_IDENTITY_UNKNOWN_LIMIT_ERROR_NAME,
      Math.floor(totalLimitError * DEFAULT_COEFFICIENT)
    );
    let uuIdentityUnknownLimitWarning = this.opts.get(
      APP_QOS_QUOTA_UU_IDENTITY_UNKNOWN_LIMIT_WARNING_NAME,
      this._getDefaultWarningValue(uuIdentityUnknownLimitError)
    );
    let uuAppTotalLimitError = this.opts.get(
      APP_QOS_QUOTA_UU_APP_TOTAL_LIMIT_ERROR_NAME,
      DEFAULT_QUOTA.uuAppTotalLimitError
    );
    let uuAppTotalLimitWarning = this.opts.get(
      APP_QOS_QUOTA_UU_APP_TOTAL_LIMIT_WARNING_NAME,
      this._getDefaultWarningValue(uuAppTotalLimitError)
    );
    let uuAppUnknownLimitError = this.opts.get(
      APP_QOS_QUOTA_UU_APP_UNKNOWN_LIMIT_ERROR_NAME,
      Math.floor(totalLimitError * DEFAULT_COEFFICIENT)
    );
    let uuAppUnknownLimitWarning = this.opts.get(
      APP_QOS_QUOTA_UU_APP_UNKNOWN_LIMIT_WARNING_NAME,
      this._getDefaultWarningValue(uuAppUnknownLimitError)
    );
    let counterResetTimeInterval = this.getCounterResetTimeInterval();
    let progressUpdatePeriod = this.getProgressUpdatePeriod();
    let progressBaseUri = this.getProgressBaseUri();
    let progressUpdateEnabled = this.getProgressUpdateEnabled();
    let cacheTtl = QosCache.getCacheTtl();
    let counterHistorySize = this.getCounterHistorySize();
    let progressBusCode = this.getProgressBusCode();

    return {
      totalLimitWarning,
      totalLimitError,
      uuIdentityTotalLimitWarning,
      uuIdentityTotalLimitError,
      uuIdentityLimitWarning,
      uuIdentityLimitError,
      uuAppTotalLimitWarning,
      uuAppTotalLimitError,
      uuAppLimitWarning,
      uuAppLimitError,
      uuIdentityUnknownLimitWarning,
      uuIdentityUnknownLimitError,
      uuAppUnknownLimitWarning,
      uuAppUnknownLimitError,
      counterResetTimeInterval,
      progressUpdatePeriod,
      progressBaseUri,
      progressBusCode,
      progressUpdateEnabled,
      cacheTtl,
      counterHistorySize,
    };
  }

  getProgressUpdatePeriod() {
    return this.progressUpdatePeriod;
  }

  setProgressUpdatePeriod(progressUpdatePeriod) {
    this.progressUpdatePeriod = progressUpdatePeriod;
  }

  getCounterResetTimeInterval() {
    return this.counterResetTimeInterval;
  }

  setCounterResetTimeInterval(counterResetTimeInterval) {
    return this.counterResetTimeInterval;
  }

  getProgressBaseUri() {
    return this.progressBaseUri;
  }

  setProgressBaseUri(progressBaseUri) {
    this.progressBaseUri = progressBaseUri;
  }

  getProgressUpdateEnabled() {
    return this.progressUpdateEnabled;
  }

  setProgressUpdateEnabled(progressUpdateEnabled) {
    this.progressUpdateEnabled = progressUpdateEnabled;
  }

  _getDefaultWarningValue(value) {
    return Math.floor(value * DEFAULT_COEFFICIENT);
  }

  getProgressBusCode() {
    return this.progressBusCode;
  }

  setProgressBusCode(progressBusCode) {
    this.progressBusCode = progressBusCode;
  }

  getCounterHistorySize() {
    return this.counterHistorySize;
  }

  setCounterHistorySize(counterHistorySize) {
    this.counterHistorySize = counterHistorySize;
  }
}

module.exports = new SysQosConfigurationAbl();
