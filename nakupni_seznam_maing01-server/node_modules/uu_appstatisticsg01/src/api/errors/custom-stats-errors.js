"use strict";
//@@viewOn:revision
// coded: Eduard Batiushchenko (9108-9377-1)
// reviewed:
//@@viewOff:revision
const AppStatisticsError = require("./errors");

const BaseErrors = {
  UC_CODE: `${AppStatisticsError.ERROR_PREFIX}sys/uuAppStatistics/getFileAttributes/`,

  InvalidCollectionList: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${BaseErrors.UC_CODE}invalidCollectionList`;
      this.message = "The binary has invalid collectionList value.";
      this.status = 400;
    }
  },

  GetAccessKeyFailed: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${BaseErrors.UC_CODE}getAccessKeyFailed`;
      this.message = "Get access key failed.";
      this.status = 400;
    }
  },
};

const GetGeneralFileAttributes = {
  UC_CODE: `${AppStatisticsError.ERROR_PREFIX}sys/uuAppStatistics/getGeneralFileAttributes/`,
  InvalidDtoIn: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${GetGeneralFileAttributes.UC_CODE}invalidDtoIn`;
      this.message = "DtoIn is not valid.";
      this.status = 400;
    }
  },

  MissingBinaryStore: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${GetGeneralFileAttributes.UC_CODE}missingBinaryStore`;
      this.message = "Missing binary store in this application.";
      this.status = 404;
    }
  },
};

const GetManagementFileAttributes = {
  UC_CODE: `${AppStatisticsError.ERROR_PREFIX}sys/uuAppStatistics/getManagementFileAttributes/`,
  InvalidDtoIn: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${GetManagementFileAttributes.UC_CODE}invalidDtoIn`;
      this.message = "DtoIn is not valid.";
      this.status = 400;
    }
  },

  MissingBinaryStore: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${GetManagementFileAttributes.UC_CODE}missingBinaryStore`;
      this.message = "Missing binary store in this application.";
      this.status = 404;
    }
  },
};

const PrivilegedGetManagementFileAttributes = {
  UC_CODE: `${AppStatisticsError.ERROR_PREFIX}sys/uuAppStatistics/privilegedGetManagementFileAttributes/`,
  InvalidDtoIn: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${PrivilegedGetManagementFileAttributes.UC_CODE}invalidDtoIn`;
      this.message = "DtoIn is not valid.";
      this.status = 400;
    }
  },

  MissingBinaryStore: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${PrivilegedGetManagementFileAttributes.UC_CODE}missingBinaryStore`;
      this.message = "Missing binary store in this application.";
      this.status = 404;
    }
  },
};

const GetExecutivesFileAttributes = {
  UC_CODE: `${AppStatisticsError.ERROR_PREFIX}sys/uuAppStatistics/getExecutivesFileAttributes/`,
  InvalidDtoIn: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${GetExecutivesFileAttributes.UC_CODE}invalidDtoIn`;
      this.message = "DtoIn is not valid.";
      this.status = 400;
    }
  },

  MissingBinaryStore: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${GetExecutivesFileAttributes.UC_CODE}missingBinaryStore`;
      this.message = "Missing binary store in this application.";
      this.status = 404;
    }
  },
};

const PrivilegedGetExecutivesFileAttributes = {
  UC_CODE: `${AppStatisticsError.ERROR_PREFIX}sys/uuAppStatistics/privilegedGetExecutivesFileAttributes/`,
  InvalidDtoIn: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${PrivilegedGetExecutivesFileAttributes.UC_CODE}invalidDtoIn`;
      this.message = "DtoIn is not valid.";
      this.status = 400;
    }
  },

  MissingBinaryStore: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${PrivilegedGetExecutivesFileAttributes.UC_CODE}missingBinaryStore`;
      this.message = "Missing binary store in this application.";
      this.status = 404;
    }
  },
};

const RecalculateCustomFile = {
  UC_CODE: `${AppStatisticsError.ERROR_PREFIX}sys/uuAppStatistics/recalculateCustomFile/`,
  InvalidDtoIn: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${RecalculateCustomFile.UC_CODE}invalidDtoIn`;
      this.message = "DtoIn is not valid.";
    }
  },

  ConfigParameterIsMissing: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${RecalculateCustomFile.UC_CODE}configParameterIsMissing`;
      this.message = "Deployment configs are missing.";
    }
  },

  ScriptCodeIsNotAllowed: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${RecalculateCustomFile.UC_CODE}scriptCodeIsNotAllowed`;
      this.message = "ScriptCode is not in whitelist for recalculation.";
    }
  },

  ConsoleUriIsNotSet: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${RecalculateCustomFile.UC_CODE}consoleUriIsNotSet`;
      this.message = "Console uri is empty or default system console was not set.";
    }
  },

  RunScriptFailed: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${RecalculateCustomFile.UC_CODE}runScriptFailed`;
      this.message = "Run script failed.";
    }
  },
};

const PrivilegedRecalculateCustomFile = {
  UC_CODE: `${AppStatisticsError.ERROR_PREFIX}sys/uuAppStatistics/privilegedRecalculateCustomFile/`,
  InvalidDtoIn: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${PrivilegedRecalculateCustomFile.UC_CODE}invalidDtoIn`;
      this.message = "DtoIn is not valid.";
    }
  },

  ConfigParameterIsMissing: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${PrivilegedRecalculateCustomFile.UC_CODE}configParameterIsMissing`;
      this.message = "Deployment configs are missing.";
    }
  },

  ScriptCodeIsNotAllowed: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${PrivilegedRecalculateCustomFile.UC_CODE}scriptCodeIsNotAllowed`;
      this.message = "ScriptCode is not in whitelist for recalculation.";
    }
  },

  ConsoleUriIsNotSet: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${PrivilegedRecalculateCustomFile.UC_CODE}consoleUriIsNotSet`;
      this.message = "Console uri is empty or default system console was not set.";
    }
  },

  RunScriptFailed: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${PrivilegedRecalculateCustomFile.UC_CODE}runScriptFailed`;
      this.message = "Run script failed.";
    }
  },
};

const UpdateCustomFile = {
  UC_CODE: `${AppStatisticsError.ERROR_PREFIX}sys/uuAppStatistics/updateCustomFile/`,
  InvalidDtoIn: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${UpdateCustomFile.UC_CODE}invalidDtoIn`;
      this.message = "DtoIn is not valid.";
      this.status = 400;
    }
  },
  MissingBinaryStore: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${UpdateCustomFile.UC_CODE}missingBinaryStore`;
      this.message = "Missing binary store in this application.";
      this.status = 404;
    }
  },
  BinaryUpdateDaoFailed: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${UpdateCustomFile.UC_CODE}binaryUpdateDaoFailed`;
      this.message = "Binary update DAO failed.";
      this.status = 400;
    }
  },
  BinaryCreateDaoFailed: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${UpdateCustomFile.UC_CODE}binaryCreateDaoFailed`;
      this.message = "Binary create DAO failed.";
      this.status = 400;
    }
  },
  BinaryGetDaoFailed: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${UpdateCustomFile.UC_CODE}binaryGetDaoFailed`;
      this.message = "Binary get DAO failed.";
      this.status = 400;
    }
  },
};

const PrivilegedUpdateCustomFile = {
  UC_CODE: `${AppStatisticsError.ERROR_PREFIX}sys/uuAppStatistics/privilegedUpdateCustomFile/`,
  InvalidDtoIn: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${PrivilegedUpdateCustomFile.UC_CODE}invalidDtoIn`;
      this.message = "DtoIn is not valid.";
      this.status = 400;
    }
  },
  MissingBinaryStore: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${PrivilegedUpdateCustomFile.UC_CODE}missingBinaryStore`;
      this.message = "Missing binary store in this application.";
      this.status = 404;
    }
  },
  BinaryUpdateDaoFailed: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${PrivilegedUpdateCustomFile.UC_CODE}binaryUpdateDaoFailed`;
      this.message = "Binary update DAO failed.";
      this.status = 400;
    }
  },
  BinaryCreateDaoFailed: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${PrivilegedUpdateCustomFile.UC_CODE}binaryCreateDaoFailed`;
      this.message = "Binary create DAO failed.";
      this.status = 400;
    }
  },
  BinaryGetDaoFailed: class extends AppStatisticsError {
    constructor() {
      super(...arguments);
      this.code = `${PrivilegedUpdateCustomFile.UC_CODE}binaryGetDaoFailed`;
      this.message = "Binary get DAO failed.";
      this.status = 400;
    }
  },
};

module.exports = {
  GetGeneralFileAttributes,
  BaseErrors,
  GetManagementFileAttributes,
  GetExecutivesFileAttributes,
  PrivilegedGetExecutivesFileAttributes,
  PrivilegedGetManagementFileAttributes,
  RecalculateCustomFile,
  PrivilegedRecalculateCustomFile,
  UpdateCustomFile,
  PrivilegedUpdateCustomFile,
};
