"use strict";
const AppStatisticsError = require("./errors");

const PrivilegedGetTFileAttributes = {
  UC_CODE: `${AppStatisticsError.ERROR_PREFIX}sys/uuAppStatistics/privilegedGetTFileAttributes/`,
  InvalidDtoIn: class extends AppStatisticsError {
    constructor(dtoOut, paramMap, cause) {
      super({ dtoOut, paramMap, status: 400 }, cause);
      this.code = `${PrivilegedGetTFileAttributes.UC_CODE}invalidDtoIn`;
      this.message = "DtoIn is not valid.";
    }
  },
  TFileStoreUriConfigIsNotSet: class extends AppStatisticsError {
    constructor(dtoOut, paramMap, cause) {
      super({ dtoOut, paramMap, status: 400 }, cause);
      this.code = `${PrivilegedGetTFileAttributes.UC_CODE}tFileStoreUriConfigIsNotSet`;
      this.message = "TFileStoreUri is not set in config.";
    }
  },
  GetAttributesFailed: class extends AppStatisticsError {
    constructor(dtoOut, paramMap, cause) {
      super({ dtoOut, paramMap, status: 400 }, cause);
      this.code = `${PrivilegedGetTFileAttributes.UC_CODE}getAttributesFailed`;
      this.message = "Get attributes failed";
    }
  },
  CreateBinaryFileAccessUriFailed: class extends AppStatisticsError {
    constructor(dtoOut, paramMap, cause) {
      super({ dtoOut, paramMap, status: 400 }, cause);
      this.code = `${PrivilegedGetTFileAttributes.UC_CODE}createBinaryFileAccessUriFailed`;
      this.message = "Failed to create an URI to the binary file";
    }
  },
};
const GetTFileAttributes = {
  UC_CODE: `${AppStatisticsError.ERROR_PREFIX}sys/uuAppStatistics/getTFileAttributes/`,
  InvalidDtoIn: class extends AppStatisticsError {
    constructor(dtoOut, paramMap, cause) {
      super({ dtoOut, paramMap, status: 400 }, cause);
      this.code = `${GetTFileAttributes.UC_CODE}invalidDtoIn`;
      this.message = "DtoIn is not valid.";
    }
  },
  TFileStoreUriConfigIsNotSet: class extends AppStatisticsError {
    constructor(dtoOut, paramMap, cause) {
      super({ dtoOut, paramMap, status: 400 }, cause);
      this.code = `${GetTFileAttributes.UC_CODE}tFileStoreUriConfigIsNotSet`;
      this.message = "TFileStoreUri is not set in config.";
    }
  },
  GetAttributesFailed: class extends AppStatisticsError {
    constructor(dtoOut, paramMap, cause) {
      super({ dtoOut, paramMap, status: 400 }, cause);
      this.code = `${GetTFileAttributes.UC_CODE}getAttributesFailed`;
      this.message = "Get attributes failed";
    }
  },
  CreateBinaryFileAccessUriFailed: class extends AppStatisticsError {
    constructor(dtoOut, paramMap, cause) {
      super({ dtoOut, paramMap, status: 400 }, cause);
      this.code = `${GetTFileAttributes.UC_CODE}createBinaryFileAccessUriFailed`;
      this.message = "Failed to create an URI to the binary file";
    }
  },
};

const RecalculateTFiles = {
  UC_CODE: `${AppStatisticsError.ERROR_PREFIX}sys/uuAppStatistics/recalculateTFiles/`,
  InvalidDtoIn: class extends AppStatisticsError {
    constructor(dtoOut, paramMap, cause) {
      super({ dtoOut, paramMap, status: 400 }, cause);
      this.code = `${RecalculateTFiles.UC_CODE}invalidDtoIn`;
      this.message = "DtoIn is not valid.";
    }
  },
  TFileStoreUriConfigIsNotSet: class extends AppStatisticsError {
    constructor(dtoOut, paramMap, cause) {
      super({ dtoOut, paramMap, status: 400 }, cause);
      this.code = `${RecalculateTFiles.UC_CODE}tFileStoreUriConfigIsNotSet`;
      this.message = "TFileStoreUri is not set in config.";
    }
  },
  UserIsNotAuthorized: class extends AppStatisticsError {
    constructor(dtoOut, paramMap, cause) {
      super({ dtoOut, paramMap, status: 400 }, cause);
      this.code = `${RecalculateTFiles.UC_CODE}UserIsNotAuthorized`;
      this.message = "User is not authorized.";
    }
  },
  RecalculateTFilesFailed: class extends AppStatisticsError {
    constructor(dtoOut, paramMap, cause) {
      super({ dtoOut, paramMap, status: 400 }, cause);
      this.code = `${RecalculateTFiles.UC_CODE}recalculateTFilesFailed`;
      this.message = "Recalculate t-files failed";
    }
  },
  CreateConsoleFailed: class extends AppStatisticsError {
    constructor(dtoOut, paramMap, cause) {
      super({ dtoOut, paramMap, status: 400 }, cause);
      this.code = `${RecalculateTFiles.UC_CODE}createConsoleFailed`;
      this.message = "Create console failed";
    }
  },
  LoadConsoleFailed: class extends AppStatisticsError {
    constructor(dtoOut, paramMap, cause) {
      super({ dtoOut, paramMap, status: 400 }, cause);
      this.code = `${RecalculateTFiles.UC_CODE}loadConsoleFailed`;
      this.message = "Load console failed";
    }
  },
};

const PrivilegedRecalculateTFiles = {
  UC_CODE: `${AppStatisticsError.ERROR_PREFIX}sys/uuAppStatistics/privilegedRecalculateTFiles/`,
  InvalidDtoIn: class extends AppStatisticsError {
    constructor(dtoOut, paramMap, cause) {
      super({ dtoOut, paramMap, status: 400 }, cause);
      this.code = `${PrivilegedRecalculateTFiles.UC_CODE}invalidDtoIn`;
      this.message = "DtoIn is not valid.";
    }
  },
  TFileStoreUriConfigIsNotSet: class extends AppStatisticsError {
    constructor(dtoOut, paramMap, cause) {
      super({ dtoOut, paramMap, status: 400 }, cause);
      this.code = `${PrivilegedRecalculateTFiles.UC_CODE}tFileStoreUriConfigIsNotSet`;
      this.message = "TFileStoreUri is not set in config.";
    }
  },
  UserIsNotAuthorized: class extends AppStatisticsError {
    constructor(dtoOut, paramMap, cause) {
      super({ dtoOut, paramMap, status: 400 }, cause);
      this.code = `${PrivilegedRecalculateTFiles.UC_CODE}UserIsNotAuthorized`;
      this.message = "User is not authorized.";
    }
  },
  PrivilegedRecalculateTFilesFailed: class extends AppStatisticsError {
    constructor(dtoOut, paramMap, cause) {
      super({ dtoOut, paramMap, status: 400 }, cause);
      this.code = `${PrivilegedRecalculateTFiles.UC_CODE}privilegedRecalculateTFilesFailed`;
      this.message = "Recalculate privileged t-files failed";
    }
  },
  CreateProgressBusFailed: class extends AppStatisticsError {
    constructor(dtoOut, paramMap, cause) {
      super({ dtoOut, paramMap, status: 400 }, cause);
      this.code = `${PrivilegedRecalculateTFiles.UC_CODE}createProgressBusFailed`;
      this.message = "Create crogressBus failed";
    }
  },
  GetProgressBusFailed: class extends AppStatisticsError {
    constructor(dtoOut, paramMap, cause) {
      super({ dtoOut, paramMap, status: 400 }, cause);
      this.code = `${PrivilegedRecalculateTFiles.UC_CODE}getProgressBusFailed`;
      this.message = "Get progressBus failed";
    }
  },
  CreateConsoleFailed: class extends AppStatisticsError {
    constructor(dtoOut, paramMap, cause) {
      super({ dtoOut, paramMap, status: 400 }, cause);
      this.code = `${PrivilegedRecalculateTFiles.UC_CODE}createConsoleFailed`;
      this.message = "Create console failed";
    }
  },
  LoadConsoleFailed: class extends AppStatisticsError {
    constructor(dtoOut, paramMap, cause) {
      super({ dtoOut, paramMap, status: 400 }, cause);
      this.code = `${PrivilegedRecalculateTFiles.UC_CODE}loadConsoleFailed`;
      this.message = "Load console failed";
    }
  },
};

module.exports = {
  PrivilegedGetTFileAttributes,
  GetTFileAttributes,
  RecalculateTFiles,
  PrivilegedRecalculateTFiles,
};
