"use strict";

const { LoggerFactory } = require("uu_appg01_core-logging");

const ResponseCounter = require("./response-counter");
const ResponseMap = require("./response-map.js");

const LOGGER = LoggerFactory.get("Uu.AppStatus.CmdDataCounter");

class CmdDataCounter {
  constructor() {
    this.reset();
  }

  reset() {
    this._totalCalls = new ResponseCounter();
    this._cmdCallsMap = new ResponseMap();
    this._awidCallsMap = new ResponseMap();
    this._uuAppErrorCallsMap = {};
    this._httpStatusCodeMap = {};
    this._knownDiffs = [0, 0, 0, 0, 0, 0]; // the first item is total count difference
  }

  record(resData) {
    this._totalCalls.record(resData.statusCode, resData.reqTime);
    if (resData.ucName) {
      this._cmdCallsMap.get(resData.ucName).record(resData.statusCode, resData.reqTime);
    }
    if (resData.awid) {
      this._awidCallsMap.get(resData.awid).record(resData.statusCode, resData.reqTime);
    }
    if (resData.errorCode) {
      this._uuAppErrorCallsMap[resData.errorCode] = (this._uuAppErrorCallsMap[resData.errorCode] || 0) + 1;
    } else if (resData.statusCode > 399 && !resData.errorCode) {
      LOGGER.warn(`There is no error code for UC ${resData.ucName} and error HTTP state ${resData.statusCode}.`);
    }

    this._httpStatusCodeMap[resData.statusCode] = (this._httpStatusCodeMap[resData.statusCode] || 0) + 1;

    this.checkStatsConsistency(resData);
  }

  getData() {
    return {
      totalCalls: this._totalCalls.getData(),
      uuCmdMap: this._cmdCallsMap.getData(),
      awidMap: this._awidCallsMap.getData(),
      uuAppErrorCallsMap: this._uuAppErrorCallsMap,
      httpStatusCodeMap: this._httpStatusCodeMap,
    };
  }

  checkStatsConsistency(data) {
    if (!LOGGER.isWarnLoggable()) {
      return;
    }

    try {
      let total = this._totalCalls;
      let current = [total._count, total._status1xxCount, total._status2xxCount, total._status3xxCount, total._error4xxCount, total._error5xxCount];
      let categories = this.splitStatusCodes(this._httpStatusCodeMap);

      let reportIssue = false;
      for (let i = 0; i < categories.length; i++) {
        if (this._knownDiffs[i] != current[i] - categories[i]) {
          this._knownDiffs[i] = current[i] - categories[i];
          reportIssue = true;
        }
      }

      if (reportIssue) {
        let forStackTrace = new Error("for stack trace");
        LOGGER.warn(`Differences between the statistics were found. Total calls: ${JSON.stringify(this._totalCalls)}, status codes: ${JSON.stringify(this._httpStatusCodeMap)}, request data: ${JSON.stringify(data)}.`, forStackTrace);
      }
    } catch (e) {
      LOGGER.warn(`Failed to check consistency of collected data.`, e);
    }
  }

  splitStatusCodes(statusCodes) {
    let result = [0, 0, 0, 0, 0, 0]; // the first item is total count

    for (const [key, value] of Object.entries(statusCodes)) {
      if (key < 200) {
        result[1] += value;
      } else if (key < 300) {
        result[2] += value;
      } else if (key < 400) {
        result[3] += value;
      } else if (key < 500) {
        result[4] += value;
      } else {
        result[5] += value;
      }
      result[0] += value;
    }
    return result;
  }

}

module.exports = new CmdDataCounter();
