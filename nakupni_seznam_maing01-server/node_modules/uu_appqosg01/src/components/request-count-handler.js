const QosIndicationHandler = require("./qos-indication-handler.js");
const SysQosConfiguration = require("../abl/sys-qos-configuration-abl.js");
class RequestCountHandler {
  constructor() {
    this.counterHistory = {};
    this.counter = counterReset(new Date().getTime());
  }

  get getCounterHistory() {
    this.composeCounterHistory();
    return this.counterHistory;
  }

  resetCounters(resetTime) {
    if (this.counter) {
      this.composeCounterHistory();
      this.counter = counterReset(resetTime);
    }
    QosIndicationHandler.debug("Rate limit counters are reset.");
  }

  composeCounterHistory() {
    if (this.counterHistory && Object.keys(this.counterHistory).length > SysQosConfiguration.getCounterHistorySize()) {
      let removeKey = Object.keys(this.counterHistory).shift();
      delete this.counterHistory[removeKey];
    }
    let latestCounter = this.prepareCounterStructure();
    this.counterHistory = { ...this.counterHistory, ...latestCounter };
  }

  prepareCounterStructure() {
    let counter = Object.assign({}, this.counter);
    let lastResetTime = counter.lastResetTime;
    delete counter.lastResetTime;
    return { [lastResetTime]: counter };
  }

  get getCounter() {
    return this.counter;
  }

  set setCounter(counter) {
    this.counter = counter;
  }

  incrTotal() {
    this.counter.total++;
  }

  getTotal() {
    return this.counter.total;
  }

  incrUuIdentityTotal() {
    this.counter.uuIdentityTotal++;
  }

  getUuIdentityTotal() {
    return this.counter.uuIdentityTotal;
  }

  incrUuIdentityUnknown() {
    this.counter.uuIdentityUnknown++;
  }

  getUuIdentityUnknown() {
    return this.counter.uuIdentityUnknown;
  }

  incrUuIdentityMapById(uuId) {
    return this.counter.uuIdentityMap[uuId]++;
  }

  getUuIdentityMapById(uuId) {
    return this.counter.uuIdentityMap[uuId];
  }

  setUuIdentityMapById(id, value) {
    return (this.counter.uuIdentityMap[id] = value);
  }

  getUuIdentityMap() {
    return this.counter.uuIdentityMap;
  }

  setUuIdentityMap(uuIdentityMap) {
    return (this.counter.uuIdentityMap = uuIdentityMap);
  }

  incrUuAppTotal() {
    this.counter.uuAppTotal++;
  }

  getUuAppTotal() {
    return this.counter.uuAppTotal;
  }

  incrUuAppUnknown() {
    this.counter.uuAppUnknown++;
  }

  getUuAppUnknown() {
    return this.counter.uuAppUnknown;
  }

  incrUuAppMapByApp(uuApp) {
    return this.counter.uuAppMap[uuApp]++;
  }

  getUuAppMapByApp(uuApp) {
    return this.counter.uuAppMap[uuApp];
  }

  setUuAppMapByApp(uuApp, value) {
    return (this.counter.uuAppMap[uuApp] = value);
  }

  getUuAppMap() {
    return this.counter.uuAppMap;
  }

  setUuAppMap(uuAppMap) {
    return (this.counter.uuAppMap = uuAppMap);
  }
}

function counterReset(resetTime) {
  let counter = {
    lastResetTime: 0,
    total: 0,
    uuIdentityTotal: 0,
    uuIdentityUnknown: 0,
    uuIdentityMap: {},
    uuAppTotal: 0,
    uuAppUnknown: 0,
    uuAppMap: {},
  };
  counter.lastResetTime = resetTime;
  return counter;
}

module.exports = new RequestCountHandler();
