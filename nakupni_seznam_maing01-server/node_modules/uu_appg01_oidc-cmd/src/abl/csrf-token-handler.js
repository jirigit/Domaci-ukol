"use strict";

const Crypto = require("crypto");
const {Digest} = require("uu_appg01_core-utils");
const {ClientCredentialsProvider} = require("uu_appg01_oidc").Internal;

const clientSecretHashMap = {};

class CsrfTokenHandler {

  static createCsrfToken(uri, credentials, sessionId, expiresAt) {
    let salt = Crypto.randomBytes(16).toString("hex");
    let clientSecret = credentials.client_private_key || credentials.client_secret;
    let clientSecretHash = Digest.sha1(clientSecret);
    let tokenValue = `${sessionId};${uri.getWorkspace()};${clientSecretHash};${salt}`;
    return `${expiresAt}.${Digest.sha1(tokenValue)}.${salt}`;
  }

  static async isCsrfTokenValid(token, uri, session) {
    let [expiresAt, tokenValue, salt] = token.split(".");
    if (!expiresAt || !tokenValue || !salt) {
      return false;
    }
    if (Number(expiresAt) * 1000 < Date.now()) {
      return false;
    }
    let clientSecretHash = await this._getClientSecretHash(session.getServiceName(), false);
    let expectedValue = Digest.sha1(`${session.getId()};${uri.getWorkspace()};${clientSecretHash};${salt}`);
    if (tokenValue === expectedValue) {
      return true;
    }
    // If value does not match, reload client secret and try to match it once more
    clientSecretHash = await this._getClientSecretHash(session.getServiceName(), true);
    expectedValue = Digest.sha1(`${session.getId()};${uri.getWorkspace()};${clientSecretHash};${salt}`);
    return tokenValue === expectedValue;
  }

  static async _getClientSecretHash(serviceName, refresh = false) {
    if (!clientSecretHashMap[serviceName] || refresh) {
      // Reading client credentials from uuAppSecretStore is expensive, therefore we are caching it
      let clientCredentials = await ClientCredentialsProvider.getClientCredentials(serviceName);
      let clientSecret = clientCredentials.client_private_key || clientCredentials.client_secret;
      clientSecretHashMap[serviceName] = Digest.sha1(clientSecret);
    }
    return clientSecretHashMap[serviceName];
  }

}

module.exports = CsrfTokenHandler;
