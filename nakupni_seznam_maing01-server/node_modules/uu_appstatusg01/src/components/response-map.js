"use strict";

const ResponseCounter = require("./response-counter");

/**
 * @typedef {import("./response-counter.js").ResponseCounterData} ResponseCounterData
 * @typedef {import("./response-counter.js")} ResponseCounter
 */

/**
 * @class
 * @classdesc A class that represents a map of response counters.
 */
class ResponseMap {
  constructor() {
    this._responseCounters = {};
  }

  create(key) {
    this._responseCounters[key] = new ResponseCounter();
    return this._responseCounters[key];
  }

  /**
   * Retrieves or creates a response counter for a given key.
   * @param {string} key response counter identifier
   * @returns {ResponseCounter}
   */
  get(key) {
    if (!this._responseCounters[key]) {
      return this.create(key);
    } else {
      return this._responseCounters[key];
    }
  }

  /**
   * Returns an object with all response counter data.
   * @returns {{[key]: ResponseCounterData}}
   */
  getData() {
    // TODO JR: I don't like this at all, are you sure that it is all necessary? it creates copies
    // all the time and not in a very effective way
    // what about just using this? it is just one iteration then, and the values should be updated aswell
    // and it will bring better performance
    // Object.keys(this._responseCounters).forEach(
    //   (key) => (this._responseCounters[key] = this._responseCounters[key].getData())
    // );
    return Object.fromEntries(Object.entries(this._responseCounters).map(([key, value]) => [key, value.getData()]));
  }
}

module.exports = ResponseMap;
