"use strict";
// documentation: https://uuapp.plus4u.net/uu-bookkit-maing01/d11a43aa3a214083b84a4e4103a4f635/book/page?code=20705710
// template:
// templateVersion:
//@@viewOn:revision
// coded: Eduard Batiushchenko (9108-9377-1)
// reviewed:
//@@viewOff:revision

const { Validator } = require("uu_appg01_server").Validation;
const { ValidationHelper } = require("uu_appg01_server").AppServer;
const Errors = require("../../api/errors/custom-stats-errors").RecalculateCustomFile;
const WARNINGS = require("../../api/warnings/custom-stats-warnings");
const AppClient = require("uu_appg01_server").AppClient;
const { UriBuilder } = require("uu_appg01_server").Uri;
const Constants = require("../../components/constants/custom-stats-constants");
const { Config } = require("uu_appg01_server").Utils;
const { getSystemIdentity } = require("../../helpers/app-stats-helper");

class RecalculateCustomFileAbl {
  constructor() {
    this.validator = Validator.load();
  }

  async recalculateCustomFile(awid, dtoIn) {
    // HDS 1, 1.1, 1.2, 1.3, 1.4
    const validationResult = this.validator.validate("uuAppstatisticsRecalculateCustomFileDtoInType", dtoIn);
    const uuAppErrorMap = ValidationHelper.processValidationResult(
      dtoIn,
      validationResult,
      WARNINGS.recalculateCustomFile.code,
      Errors.InvalidDtoIn
    );

    const { scriptCode } = dtoIn;

    // HDS 2, 2.A.
    const scriptEngineBaseUri = Config.get(Constants.scriptEngineBaseUri);
    const scriptRepositoryBaseUri = Config.get(Constants.scriptRepositoryUri);
    const scriptCodesWhiteList = Config.get(Constants.scriptCodesWhiteList);

    // HDS 2.B.
    if (!scriptEngineBaseUri || !scriptRepositoryBaseUri || !scriptCodesWhiteList) {
      const missingConfigParam = [];

      if (!scriptEngineBaseUri) missingConfigParam.push(Constants.scriptEngineBaseUri);
      if (!scriptRepositoryBaseUri) missingConfigParam.push(Constants.scriptRepositoryUri);
      if (!scriptCodesWhiteList) missingConfigParam.push(Constants.scriptCodesWhiteList);

      throw new Errors.ConfigParameterIsMissing({
        ...uuAppErrorMap,
        paramMap: { ...uuAppErrorMap.paramMap, missingConfigParam },
      });
    }

    //  HDS 3
    if (!scriptCodesWhiteList.includes(scriptCode)) {
      throw new Errors.ScriptCodeIsNotAllowed({
        ...uuAppErrorMap,
        paramMap: { ...uuAppErrorMap.paramMap, scriptCode },
      });
    }

    // HDS 4, 4.1
    const sysIdentitySession = await getSystemIdentity();

    let scriptDtoIn = { clientAwid: awid };
    if ("scriptDtoIn" in dtoIn) scriptDtoIn = { ...scriptDtoIn, ...dtoIn.scriptDtoIn };

    const scriptEngineClient = new AppClient({
      baseUri: scriptEngineBaseUri,
      session: sysIdentitySession,
    });

    const scriptUri = UriBuilder.parse(scriptRepositoryBaseUri)
      .setUseCase(Constants.script.get)
      .clearParameters()
      .setParameters({ code: dtoIn.scriptCode })
      .toString();

    let runScriptResponse;
    try {
      const runScriptDtoIn = {
        scriptUri,
        scriptDtoIn,
      };

      runScriptResponse = await scriptEngineClient.post(Constants.useCases.scriptEngine.runScript, runScriptDtoIn);
    } catch (e) {
      if (e.code.endsWith(Constants.errors.consoleUriIsNotSet)) {
        throw new Errors.ConsoleUriIsNotSet(uuAppErrorMap, e);
      }

      throw new Errors.RunScriptFailed(uuAppErrorMap, e);
    }

    // HDS 5
    return { scriptRunId: runScriptResponse.scriptRunId, uuAppErrorMap };
  }
}

module.exports = new RecalculateCustomFileAbl();
