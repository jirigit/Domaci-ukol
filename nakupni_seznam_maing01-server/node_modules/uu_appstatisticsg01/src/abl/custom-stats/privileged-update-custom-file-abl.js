"use strict";
// documentation: https://uuapp.plus4u.net/uu-bookkit-maing01/d11a43aa3a214083b84a4e4103a4f635/book/page?code=93861886
// template:
// templateVersion:
//@@viewOn:revision
// coded: Eduard Batiushchenko (9108-9377-1)
// reviewed:
//@@viewOff:revision

const { Validator } = require("uu_appg01_server").Validation;
const { ValidationHelper } = require("uu_appg01_server").AppServer;
const Errors = require("../../api/errors/custom-stats-errors");
const WARNINGS = require("../../api/warnings/custom-stats-warnings");
const AppClient = require("uu_appg01_server").AppClient;
const Constants = require("../../components/constants/custom-stats-constants");
const { Config } = require("uu_appg01_server").Utils;
const { getSystemIdentity } = require("../../helpers/app-stats-helper");

class PrivilegedUpdateCustomFileAbl {
  constructor() {
    this.validator = Validator.load();
  }

  async privilegedUpdateCustomFile(awid, dtoIn) {
    // HDS 1, 1.1, 1.2, 1.3, 1.4
    const validationResult = this.validator.validate("uuAppstatisticsPrivilegedUpdateCustomFileDtoInType", dtoIn);
    const uuAppErrorMap = ValidationHelper.processValidationResult(
      dtoIn,
      validationResult,
      WARNINGS.privilegedUpdateCustomFile.code,
      Errors.PrivilegedUpdateCustomFile.InvalidDtoIn
    );

    // HDS 2
    const binaryStoreBaseUri = Config.get(Constants.binaryStoreBaseUri) || Config.get(Constants.defaultBinaryStore);
    if (!binaryStoreBaseUri) throw new Errors.PrivilegedUpdateCustomFile.MissingBinaryStore(uuAppErrorMap);

    // HDS 3
    const sysIdentitySession = await getSystemIdentity();

    const binaryClient = new AppClient({
      baseUri: binaryStoreBaseUri,
      session: sysIdentitySession,
    });

    // HDS 4
    const uuObject = {
      clientAwid: awid,
      code: dtoIn.fileCode,
      collectionList: [Constants.collections.uuAppStatistics, dtoIn.collection],
      data: dtoIn.data,
    };

    let binaryObject;
    try {
      const { data, collectionList, ...binaryGetDtoIn } = uuObject;
      binaryObject = await binaryClient.get(Constants.useCases.binary.get, binaryGetDtoIn);
    } catch (e) {
      if (e.code !== Constants.errors.binaryGetDoesntExist) {
        throw new Errors.PrivilegedUpdateCustomFile.BinaryGetDaoFailed({ uuAppErrorMap }, e);
      }
    }

    // HDS 5
    let dtoOut;
    if (binaryObject) {
      try {
        dtoOut = await binaryClient.post(Constants.useCases.binary.update, uuObject);
      } catch (e) {
        throw new Errors.PrivilegedUpdateCustomFile.BinaryUpdateDaoFailed({ uuAppErrorMap }, e);
      }
    } else {
      try {
        dtoOut = await binaryClient.post(Constants.useCases.binary.create, uuObject);
      } catch (e) {
        throw new Errors.PrivilegedUpdateCustomFile.BinaryCreateDaoFailed({ uuAppErrorMap }, e);
      }
    }

    // HDS 6
    return { ...dtoOut, uuAppErrorMap };
  }
}

module.exports = new PrivilegedUpdateCustomFileAbl();
