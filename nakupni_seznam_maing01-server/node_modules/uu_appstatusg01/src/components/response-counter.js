const { Histogram } = require("uu_appg01_core-utils");

const { LoggerFactory } = require("uu_appg01_core-logging");

// expected request time in seconds - internally, response time is stored in miliseconds
const HISTOGRAM_MIN_EXPECTED_VALUE = 1;
const HISTOGRAM_MAX_EXPECTED_VALUE = 60 * 60 * 1000;
const HISTOGRAM_SAMPLE_COUNT = 150;

const LOGGER = LoggerFactory.get("Uu.AppStatus.ResponseCounter");

/**
 * @typedef {{
 *  count: number,
 *  status1xxCount: number,
 *  status2xxCount: number,
 *  status3xxCount: number,
 *  error4xxCount: number, error5xxCount: number,
 *  minRespTime: number,
 *  avgRespTime: number,
 *  maxRespTime: number,
 *  medianRespTime: number,
 *  cumulativeRespTime: number,
 * }} ResponseCounterData
 */

/**
 * @class
 * @classdesc Class for storing and processing request statistics.
 */
class ResponseCounter {
  constructor() {
    this._count = 0;
    this._status1xxCount = 0;
    this._status2xxCount = 0;
    this._status3xxCount = 0;
    this._error4xxCount = 0;
    this._error5xxCount = 0;
    this._histogram = new Histogram(HISTOGRAM_MIN_EXPECTED_VALUE, HISTOGRAM_MAX_EXPECTED_VALUE, HISTOGRAM_SAMPLE_COUNT);
  }

  /**
   * Records a new values to response counter
   * @param statusCode
   * @param respTime
   * @return {ResponseCounter}
   */
  record(statusCode, respTime) {
    this._recordStatusCode(statusCode);
    this._histogram.record(respTime);
    return this;
  }

  /**
   * Calculates status code statistics
   * @param statusCode
   * @return {ResponseCounter}
   * @private
   */
  _recordStatusCode(statusCode) {
    this._count += 1;
    if (statusCode) {
      if (statusCode < 200) {
        this._status1xxCount += 1;
      } else if (statusCode < 300) {
        this._status2xxCount += 1;
      } else if (statusCode < 400) {
        this._status3xxCount += 1;
      } else if (statusCode < 500) {
        this._error4xxCount += 1;
      } else {
        this._error5xxCount += 1;
      }
    } else {
      LOGGER.warn(`Detected a falsy value (${statusCode}) for recording status code.`);
    }
  }

  /**
   * Returns response counter data
   * @returns {ResponseCounterData}
   */
  getData() {
    return {
      count: this._count,
      status1xxCount: this._status1xxCount,
      status2xxCount: this._status2xxCount,
      status3xxCount: this._status3xxCount,
      error4xxCount: this._error4xxCount,
      error5xxCount: this._error5xxCount,
      minRespTime: Math.trunc(this._histogram.min()),
      avgRespTime: Math.trunc(this._histogram.average()),
      maxRespTime: Math.trunc(this._histogram.max()),
      medianRespTime: Math.trunc(this._histogram.median()),
      cumulativeRespTime: this._count * Math.trunc(this._histogram.average()),
    };
  }
}

module.exports = ResponseCounter;
